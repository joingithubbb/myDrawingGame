{"version":3,"sources":["helpers.js","Canvas.js","End.js","Controls.js","Countdown.js","Round.js","GameInfoText.js","Situation.js","Game.js","Home.js","GameEngine.js","serviceWorker.js","index.js","App.js"],"names":["getPrediction","theCanvas","model","canvas","tensor","current","tf","resizeNearestNeighbor","mean","expandDims","toFloat","div","then","loadedModel","predict","data","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","prediction","wrap","_context","prev","next","abrupt","sent","stop","_x","apply","this","arguments","Canvas","React","forwardRef","props","ref","lastX","lastY","mouseDown","labels","require","useEffect","context","getContext","fillStyle","fillRect","height","width","react_default","createElement","onMouseDown","onMouseUp","undefined","currentLabel","pointEvaluation","onMouseMove","e","rect","target","getBoundingClientRect","x","clientX","left","y","clientY","top","_drawLine","strokeStyle","lineWidth","lineJoin","beginPath","moveTo","lineTo","closePath","stroke","drawLine","_drawLine2","slicedToArray","handleMousemove","useIsWinner","useContext","PointsContext","points","gameSettings","Win","Lose","useRouteToHome","window","location","replace","End","RouteToGame","type","onClick","Controls","Countdown","_useState","useState","_useState2","countdownNumber","setCountdownNumber","interval","setInterval","resetCountdown","setResetCountdownToFalse","clearInterval","round","Round","GameInfoText","displayPoint","Situation","Game","createRef","setRound","_useState3","_useState4","setResetCountdown","_useState5","_useState6","setDisplayPoint","_useState7","_useState8","gameOn","setGameOn","incrementLabel","resetTheCountdown","incrementTheRound","scoreOfTheRound","setThePoints","id","Home","Home_InfoTextHome","Home_PlayGameButton","Component","InfoTextHome","PlayGameButton","react_router_dom","to","createContext","transferPointsReducer","action","transferredPoint","GameEngine","_useReducer","useReducer","_useReducer2","setPoints","increase","Provider","value","AppRouter","HomeRouter","Home_Home","GameRouter","EndRouter","NoMatch","react_router","path","exact","component","render","routeProps","assign","Consumer","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.32eaa209.chunk.js","sourcesContent":["import * as tf from \"@tensorflow/tfjs\";\n\nfunction preprocessCanvas(canvas) {\n  // Preprocess image for the network\n  let tensor = tf\n    .fromPixels(canvas) // Shape: (300, 300, 3) - RGB image\n    .resizeNearestNeighbor([28, 28]) // Shape: (28, 28, 3) - RGB image\n    .mean(2) // Shape: (28, 28) - grayscale\n    .expandDims(2) // Shape: (28, 28, 1) - network expects 3d values with channels in the last dimension\n    .expandDims() // Shape: (1, 28, 28, 1) - network makes predictions for \"batches\" of images\n    .toFloat(); // Network works with floating points inputs\n  return tensor.div(255.0); // Normalize [0..255] values into [0..1] range\n}\n\nexport function getPrediction(theCanvas, model) {\n  const tensor = preprocessCanvas(theCanvas.current);\n  return model\n    .then(loadedModel => loadedModel.predict(tensor).data())\n    .then(async prediction => await tf.argMax(prediction).data()); // returns an int32 containing the predicted class\n}\n","import React, { useEffect } from \"react\";\r\nimport { getPrediction } from \"./helpers.js\";\r\n\r\nconst Canvas = React.forwardRef((props, ref) => {\r\n  let mouseDown = false;\r\n  let lastX;\r\n  let lastY;\r\n\r\n\r\n  const labels = require(\"./labels.json\");\r\n\r\n  function drawLine(canvas, x, y, lastX, lastY) {\r\n    let context = canvas.getContext(\"2d\");\r\n\r\n    context.strokeStyle = \"#000000\";\r\n    context.lineWidth = 8;\r\n    context.lineJoin = \"round\";\r\n\r\n    context.beginPath();\r\n    context.moveTo(lastX, lastY);\r\n    context.lineTo(x, y);\r\n    context.closePath();\r\n    context.stroke();\r\n\r\n    return [x, y];\r\n  }\r\n\r\n  // on Mouseup a prediction will be made and a point will be given\r\n  const handleMouseup = () => {\r\n    mouseDown = false;\r\n    [lastX, lastY] = [undefined, undefined];\r\n\r\n    getPrediction(ref, props.model).then(prediction => {\r\n      if (labels[prediction[0]] === props.currentLabel) {\r\n        props.pointEvaluation(true); // a point is given to the player, because the prediction matches the wanted label\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleMousemove = e => {\r\n    const rect = e.target.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n\r\n    if (mouseDown) {\r\n      [lastX, lastY] = drawLine(e.target, x, y, lastX, lastY);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const canvas = ref.current;\r\n    const context = canvas.getContext(\"2d\");\r\n\r\n    context.fillStyle = \"#ffffff\";\r\n    context.fillRect(0, 0, canvas.height, canvas.width);\r\n  });\r\n\r\n  return (\r\n    <canvas\r\n      height={300}\r\n      width={300}\r\n      ref={ref}\r\n      onMouseDown={() => (mouseDown = true)}\r\n      onMouseUp={handleMouseup}\r\n      onMouseMove={e => handleMousemove(e)}\r\n    />\r\n  );\r\n});\r\n\r\nexport { Canvas };\r\n","import React, { useContext } from \"react\";\r\nimport { PointsContext } from \"./GameEngine\";\r\nimport * as gameSettings from \"./gameSettings.json\";\r\n\r\n//REQUIREMENT: declaration and definition of custom hook 1\r\nfunction useIsWinner() {\r\n    // REQUIREMENT: Use of Context to avoid \"prop-drilling\"\r\n    const points = useContext(PointsContext);\r\n\r\n    if (points.points >= gameSettings.pointsToWin) {\r\n        return true;\r\n    }\r\n    else { return false }\r\n}\r\n\r\nfunction Win() {\r\n    // REQUIREMENT: Use of Context to avoid \"prop-drilling\"\r\n    const points = useContext(PointsContext);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Yes you won!</h2>\r\n            <h2>Congratulations! YOU ARE THE BEST!</h2>\r\n            <h3>Score: {points.points}</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Lose() {\r\n    // REQUIREMENT: Use of Context to avoid \"prop-drilling\"\r\n    const points = useContext(PointsContext);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Oh no, you lost!</h2>\r\n            <h2>Next time you'll do better!</h2>\r\n            <h3>Score: {points.points}</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\n//REQUIREMENT: declaration and definition of custom hook 2\r\nfunction useRouteToHome() {\r\n    window.location.replace('./');\r\n}\r\n\r\n\r\nfunction End() {\r\n\r\n    function RouteToGame() {\r\n        window.location.replace('./game');\r\n    }\r\n\r\n    //REQUIREMENT: use of custom hook 1\r\n    if (useIsWinner() === true) {\r\n        return (\r\n            <div>\r\n                <Win />\r\n                {/* REQUIREMENT: use of custom hook 2 */}\r\n                <button type=\"submit\" onClick={useRouteToHome}>Home</button>\r\n                <br />\r\n                <button type=\"submit\" onClick={RouteToGame}>Play again</button>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                <Lose />\r\n                {/* REQUIREMENT: use of custom hook 2 */}\r\n                <button type=\"submit\" onClick={useRouteToHome}>Home</button>\r\n                <br />\r\n                <button type=\"submit\" onClick={RouteToGame}>Play again</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { End, useIsWinner, useRouteToHome };","import React from \"react\";\r\nimport { useRouteToHome } from \"./End\";\r\n\r\nfunction Controls({ theCanvas }) {\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={() => {\r\n          const canvas = theCanvas.current;\r\n          const ctx = canvas.getContext(\"2d\");\r\n          ctx.fillRect(0, 0, canvas.height, canvas.width);\r\n        }}\r\n      >\r\n        Clear the canvas.\r\n      </button>\r\n      {/* REQUIREMENT: use of custom hook 2 */}\r\n      <button type=\"submit\" onClick={useRouteToHome}>Home</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { Controls };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport * as gameSettings from \"./gameSettings.json\";\r\n\r\n\r\n\r\nfunction Countdown(props) {\r\n\r\n  var [countdownNumber, setCountdownNumber] = useState(gameSettings.roundTime);\r\n\r\n  //REQUIREMENT: Appropriate use of side-effects, useEffect() hook\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (countdownNumber === 0) {\r\n        props.pointEvaluation(false); // no point is given for this round, because the time is up\r\n        setCountdownNumber(gameSettings.roundTime); // reset of the countdown time\r\n      }\r\n      else {\r\n        if (props.resetCountdown === true) {\r\n          setCountdownNumber(gameSettings.roundTime); // extraordinary reset of the countdown time\r\n          props.setResetCountdownToFalse();\r\n        }\r\n        else {\r\n          setCountdownNumber(countdownNumber -= 1); // here the countdown gets counted down every second\r\n        }\r\n      }\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  });\r\n\r\n  if (props.round <= gameSettings.maxRounds) {\r\n    return (\r\n      <div>\r\n        <h3>Countdown: {countdownNumber}</h3>\r\n      </div>\r\n\r\n    )\r\n  }\r\n\r\n  else {\r\n    return (\r\n      <div></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Countdown };","import React from \"react\";\r\nimport * as gameSettings from \"./gameSettings.json\";\r\n\r\n\r\nfunction Round(props) {\r\n\r\n    if (props.round <= gameSettings.maxRounds) {\r\n        return (\r\n            <div>\r\n                <h3>Round: {props.round}</h3>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Round };","import React, { useContext } from \"react\";\r\nimport { PointsContext } from \"./GameEngine\";\r\n\r\nfunction GameInfoText(props) {\r\n\r\n    // REQUIREMENT: Use of Context to avoid \"prop-drilling\"\r\n    const { points } = useContext(PointsContext);\r\n\r\n    if (props.currentLabel === \"loading\") {\r\n        return (\r\n            <h1>Please wait a moment...</h1>\r\n        );\r\n    }\r\n\r\n    else if (props.displayPoint === false) {\r\n        return (\r\n            <div>\r\n                <h1>Oh man you can do better!</h1>\r\n                <h1>Points: {points}</h1>\r\n                <h1>Draw a {props.currentLabel}!</h1>\r\n            </div >\r\n        );\r\n    }\r\n\r\n    else if (props.displayPoint === true) {\r\n        return (\r\n            <div>\r\n                <h1>Nice job!</h1>\r\n                <h1>Points: {points}</h1>\r\n                <h1>Draw a {props.currentLabel}!</h1>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <div>\r\n                <h1>Points: {points}</h1>\r\n                <h1>Draw a {props.currentLabel}!</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { GameInfoText };","import React from \"react\";\r\nimport { useIsWinner } from \"./End\";\r\n\r\nfunction Situation() {\r\n\r\n    //REQUIREMENT: use of custom hook 1\r\n    if (useIsWinner() === true) {\r\n        return (\r\n            <div>\r\n                <h1>You are winning!</h1>\r\n                <h1>GOOD JOB PLAYER!</h1>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return (\r\n            <div>\r\n                <h1>You need more points!</h1>\r\n                <h1>YOU CAN DO THIS!</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Situation };","import React from \"react\";\r\nimport \"./index.css\";\r\nimport * as gameSettings from \"./gameSettings.json\";\r\nimport { useState } from \"react\";\r\nimport { Canvas } from \"./Canvas\";\r\nimport { Controls } from \"./Controls\";\r\nimport { Countdown } from \"./Countdown\";\r\nimport { Round } from \"./Round\";\r\nimport { GameInfoText } from \"./GameInfoText\";\r\nimport { End } from \"./End\";\r\nimport { Situation } from \"./Situation\";\r\n\r\n\r\nfunction Game(props) {\r\n    const labels = require(\"./labels.json\");\r\n    let ref = React.createRef();\r\n\r\n    const [round, setRound] = useState(1);\r\n    const [resetCountdown, setResetCountdown] = useState(false);\r\n    const [displayPoint, setDisplayPoint] = useState(null);\r\n    const [gameOn, setGameOn] = useState(false);\r\n    var currentLabel;\r\n\r\n    if (round <= gameSettings.maxRounds) {\r\n        currentLabel = labels[round - 1];\r\n    }\r\n    else if (round > gameSettings.maxRounds) {\r\n        currentLabel = \"loading\";\r\n\r\n        return (\r\n            <End></End>\r\n        )\r\n    }\r\n\r\n    function incrementLabel() {\r\n        currentLabel = labels[round - 1];\r\n    }\r\n\r\n    function resetTheCountdown() {\r\n        setResetCountdown(true);\r\n\r\n    }\r\n\r\n    function incrementTheRound() {\r\n        setRound(round + 1);\r\n    }\r\n\r\n    function pointEvaluation(scoreOfTheRound) {\r\n        if (scoreOfTheRound === true) {\r\n            incrementLabel();\r\n            resetTheCountdown();\r\n            incrementTheRound();\r\n            setDisplayPoint(true); // For the display of the \"Nice Job!\"/\"Oh man you can do better!\"\r\n            props.setThePoints(true);\r\n        }\r\n        else {\r\n            incrementLabel();\r\n            resetTheCountdown();\r\n            incrementTheRound();\r\n            setDisplayPoint(false); // For the display of the \"Nice Job!\"/\"Oh man you can do better!\"\r\n            props.setThePoints(false);\r\n        }\r\n    }\r\n\r\n    function setResetCountdownToFalse() {\r\n        setResetCountdown(false);\r\n\r\n    }\r\n\r\n    function RouteToGame() {\r\n        window.location.replace('./game');\r\n    }\r\n\r\n\r\n    if (!gameOn) {\r\n        return (\r\n            <div>\r\n                <h2>You'll have to draw the requested thing!</h2>\r\n                <h3>For each correct answer you'll get a point. {gameSettings.maxRounds} rounds\r\n                it will take! {gameSettings.pointsToWin} points to win! But beware of the countdown!</h3>\r\n                <button id=\"startGameButton\" type=\"submit\" onClick={() => setGameOn(true)}>Start Game</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    else {\r\n        return (\r\n            <div>\r\n                <GameInfoText currentLabel={currentLabel} displayPoint={displayPoint} />\r\n                <Countdown resetTheCountdown={resetTheCountdown}\r\n                    pointEvaluation={pointEvaluation} resetCountdown={resetCountdown}\r\n                    setResetCountdownToFalse={setResetCountdownToFalse} round={round} />\r\n                <Round round={round} />\r\n                <button type=\"submit\" onClick={RouteToGame}>New Game</button>\r\n                <div>\r\n                    <Canvas ref={ref} pointEvaluation={pointEvaluation} currentLabel={currentLabel}\r\n                        model={props.model} labels={labels} />\r\n                    <Controls theCanvas={ref} />\r\n                    <Situation />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport { Game };\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//REQUIREMENT: class-based component\r\nclass Home extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <h1>Sketch</h1>\r\n                <InfoTextHome />\r\n                <PlayGameButton />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//REQUIREMENT: class-based component\r\nclass InfoTextHome extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <h2>Welcome to Sketch the Drawing Game!</h2>\r\n                <h3>This is a game inspired by Google's \"Quick, Draw!\" - You'll have to draw quickly!</h3>\r\n                <br></br>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//REQUIREMENT: class-based component\r\nclass PlayGameButton extends Component {\r\n    render() {\r\n\r\n        return (\r\n            <Link to=\"./game\">Proceed</Link>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Home, PlayGameButton };","import React, { useReducer } from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { Switch } from \"react-router\";\r\nimport { Game } from \"./Game\";\r\nimport { Home } from \"./Home\";\r\nimport { End } from \"./End\";\r\nimport * as tf from \"@tensorflow/tfjs\";\r\n\r\nconst model = tf.loadModel(\"./model/model.json\");\r\n\r\n// REQUIREMENT: Use of Context to avoid \"prop-drilling\"\r\nconst PointsContext = React.createContext();\r\n\r\nfunction transferPointsReducer(points, action) {\r\n  switch (action.transferredPoint) {\r\n    case \"increment\":\r\n      return points + 1;\r\n    case \"decrement\":\r\n      return points - 1;\r\n    default:\r\n  }\r\n}\r\n\r\nfunction GameEngine() {\r\n\r\n  const initialState = 0;\r\n\r\n  // REQUIREMENT: Appropriate use of the useReducer() hook\r\n  var [points, setPoints] = useReducer(transferPointsReducer, initialState);\r\n\r\n  function setThePoints(increase) {\r\n    if (increase === true) {\r\n      setPoints({ transferredPoint: \"increment\" });\r\n    }\r\n\r\n    else {\r\n      setPoints({ transferredPoint: \"decrement\" });\r\n    }\r\n\r\n  }\r\n\r\n  // REQUIREMENT: Use of Context to avoid \"prop-drilling\"\r\n  return (\r\n    <PointsContext.Provider value={{\r\n      \"points\": points,\r\n      \"setThePoints\": setThePoints\r\n    }}>\r\n      <AppRouter setThePoints={setThePoints} />\r\n    </PointsContext.Provider>\r\n  );\r\n}\r\n\r\nfunction HomeRouter() {\r\n  return <Home />;\r\n}\r\n\r\nfunction GameRouter(props) {\r\n\r\n  return (\r\n    <Game setThePoints={props.setThePoints} model={model} />\r\n  );\r\n}\r\n\r\nfunction EndRouter() {\r\n\r\n  return (\r\n    <End />\r\n  );\r\n}\r\n\r\nfunction NoMatch() {\r\n\r\n  return <h1>Nothing to see here - Four Oh! Four</h1>;\r\n}\r\n\r\nfunction AppRouter(props) {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={HomeRouter} />\r\n          <Route\r\n            path=\"/game\"\r\n            render={(routeProps) => (<GameRouter {...routeProps} {...props}\r\n              setThePoints={props.setThePoints} />)}\r\n          />\r\n          <Route path=\"/end\" component={EndRouter} />\r\n          <Route component={NoMatch} />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport { GameEngine };\r\nexport const PointsProvider = PointsContext.Provider;\r\nexport const PointsConsumer = PointsContext.Consumer;\r\nexport { PointsContext };\r\nexport { HomeRouter };\r\nexport { GameRouter };\r\nexport { EndRouter };","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <App />\r\n  </div>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\";\r\nimport { GameEngine } from \"./GameEngine\";\r\n\r\nfunction App() {\r\n  return (\r\n  <div>\r\n    <GameEngine />\r\n  </div>\r\n  );\r\n}\r\n\r\nexport { App };\r\n"],"sourceRoot":""}